# Generated by Django 4.2.5 on 2025-10-24 18:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("opportunity", "0083_add_question_id_to_blobmeta"),
    ]

    operations = [
        migrations.CreateModel(
            name="Task",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_by", models.CharField(max_length=255)),
                ("modified_by", models.CharField(max_length=255)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                (
                    "task_type",
                    models.CharField(
                        choices=[("warning", "Warning"), ("deactivation", "Deactivation")],
                        default="warning",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("unassigned", "Unassigned"),
                            ("network_manager", "Network Manager"),
                            ("program_manager", "Program Manager"),
                            ("action_underway", "Action Underway"),
                            ("resolved", "Resolved"),
                            ("closed", "Closed"),
                        ],
                        default="unassigned",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[("low", "Low"), ("medium", "Medium"), ("high", "High")],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "learning_assignment_text",
                    models.TextField(
                        blank=True, help_text="Text description of learning modules or training assigned"
                    ),
                ),
                (
                    "audit_session_id",
                    models.IntegerField(
                        blank=True, help_text="Reference to audit session that triggered this task", null=True
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        help_text="User currently assigned to handle this task",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by_user",
                    models.ForeignKey(
                        help_text="User who created this task",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "opportunity",
                    models.ForeignKey(
                        help_text="The opportunity this task is associated with",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="opportunity.opportunity",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The Field Level Worker this task is about",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-date_created"],
            },
        ),
        migrations.CreateModel(
            name="TaskAISession",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_by", models.CharField(max_length=255)),
                ("modified_by", models.CharField(max_length=255)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("ocs_session_id", models.CharField(help_text="Session ID from OCS API", max_length=255, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("initiated", "Initiated"),
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="initiated",
                        max_length=20,
                    ),
                ),
                (
                    "session_metadata",
                    models.JSONField(blank=True, default=dict, help_text="Metadata for reconnecting to OCS session"),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="ai_sessions", to="tasks.task"
                    ),
                ),
            ],
            options={
                "ordering": ["-date_created"],
            },
        ),
        migrations.CreateModel(
            name="TaskEvent",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_by", models.CharField(max_length=255)),
                ("modified_by", models.CharField(max_length=255)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("created", "Created"),
                            ("status_changed", "Status Changed"),
                            ("assigned", "Assigned"),
                            ("commented", "Commented"),
                            ("learning_assigned", "Learning Assigned"),
                            ("learning_completed", "Learning Completed"),
                            ("ai_conversation", "AI Conversation"),
                            ("notification_sent", "Notification Sent"),
                            ("flw_acknowledged", "FLW Acknowledged"),
                            ("pattern_detected", "Pattern Detected"),
                            ("other", "Other"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "actor",
                    models.CharField(help_text="Name or identifier of who/what performed this action", max_length=255),
                ),
                ("description", models.TextField()),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, help_text="Additional structured data about this event"
                    ),
                ),
                (
                    "actor_user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who performed this action, if applicable",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="events", to="tasks.task"
                    ),
                ),
            ],
            options={
                "ordering": ["-date_created"],
                "indexes": [models.Index(fields=["task", "-date_created"], name="tasks_taske_task_id_12dc77_idx")],
            },
        ),
        migrations.CreateModel(
            name="TaskComment",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_by", models.CharField(max_length=255)),
                ("modified_by", models.CharField(max_length=255)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                ("content", models.TextField()),
                (
                    "author",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="comments", to="tasks.task"
                    ),
                ),
            ],
            options={
                "ordering": ["-date_created"],
                "indexes": [models.Index(fields=["task", "-date_created"], name="tasks_taskc_task_id_20474d_idx")],
            },
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(fields=["opportunity", "status"], name="tasks_task_opportu_2e6b34_idx"),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(fields=["user", "status"], name="tasks_task_user_id_c0fce1_idx"),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(fields=["status", "-date_created"], name="tasks_task_status_4eda86_idx"),
        ),
    ]
